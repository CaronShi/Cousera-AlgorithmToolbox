def main ():

    D = EditDistance (A, B)
    Adistance, Bdistance = OutputAlignment (D, i, j)


def EditDistance (A, B)ï¼š

    D = list ()

    # D(0,j) <- j
    D.append ([j for j in range (0, m+1)])
    # [[0, 1, 2, ..., m]]
    # D(i,0) <- i
    for i in range (1, n+1): D.append ([i])
    # [[0, 1, 2, ..., m],
    #  [1              ],
    #  [2              ],
    #  ...
    #  [n              ]]
    for j in range (1, m+1):
        for i in range (1, n+1):d
            insertion = D[i][j-1] + 1
            deletion = D[i-1][j] + 1
            match = D[i-1][j-1]
            mismatch = D[i-1][j-1] + 1
            if A [i-1] == B [j-1]: # A and B start from 0
                D[i][j] = min (insertion, deletion, match)
            else:
                D[i][j] = min (insertion, deleteion, mismatch)
    return D


def OutputAlignment (D, i, j):

    Areverse = []
    Breverse = []

    while True:
        if i == 0 and j == 0: break
        elif i > 0 and D [i][j] == D [i-1][j] + 1:
            Areverse.append (A[i-1])
            Breverse.append ('-')
            i = i - 1
        elif j > 0 and D [i][j] == D [i][j-1] + 1:
            Areverse.append ('-')
            Breverse.append (B[j-1])
            j = j - 1
        else:
            Areverse.append (A[i-1])
            Breverse.append (B[j-1])
            i = i - 1
            j = j - 1
    Alist = Areverse [:: -1] # [D, i, s, t, a, n, c, e]
    Blist = Breverse [:: -1]
    A = ''.join (Alist)      # 'Distance'
    B = ''.join (Blist)
    return A, B
